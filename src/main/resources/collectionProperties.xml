<?xml version="1.0"?>

<collections>
    <collection>
        <name>ArrayList</name>
        <description>Resizable-array implementation of the List interface. Implements all optional list operations, and permits all elements, including null. In addition to implementing the List interface, this class provides methods to manipulate the size of the array that is used internally to store the list. (This class is roughly equivalent to Vector, except that it is unsynchronized.)
The size, isEmpty, get, set, iterator, and listIterator operations run in constant time. The add operation runs in amortized constant time, that is, adding n elements requires O(n) time. All of the other operations run in linear time (roughly speaking). The constant factor is low compared to that for the LinkedList implementation.</description>
        <methods>
            <method>
                <type>Access</type>
                <value>get</value><bigo>O(1)</bigo>
                <description>Returns the element at the specified position in this list.</description>
                <params>
                    <paramsValue>java.lang.Integer</paramsValue>
                </params>
            </method>
            <method>
                <type>Search</type>
                <value>contains</value><bigo>O(n)</bigo>
                <description>Returns true if this list contains the specified element. More formally, returns true if and only if this list contains at least one element e such that Objects.equals(o, e).</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Insertion</type>
                <value>add</value><bigo>O(1)</bigo>
                <description>Appends the specified element to the end of this list.</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Removal</type>
                <value>remove</value><bigo>O(n)</bigo>
                <description>Removes the element at the specified position in this list. Shifts any subsequent elements to the left (subtracts one from their indices).</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
        </methods>
    </collection>
    <collection>
        <name>LinkedList</name>
        <description>Doubly-linked list implementation of the List and Deque interfaces. Implements all optional list operations, and permits all elements (including null).
All of the operations perform as could be expected for a doubly-linked list. Operations that index into the list will traverse the list from the beginning or the end, whichever is closer to the specified index.</description>
        <methods>
            <method>
                <type>Access</type>
                <value>get</value><bigo>O(n)</bigo>
                <description>Returns the element at the specified position in this list.</description>
                <params>
                    <paramsValue>java.lang.Integer</paramsValue>
                </params>
            </method>
            <method>
                <type>Search</type>
                <value>contains</value><bigo>O(n)</bigo>
                <description>Returns true if this list contains the specified element. More formally, returns true if and only if this list contains at least one element e such that Objects.equals(o, e).</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Insertion</type>
                <value>add</value><bigo>O(1)</bigo>
                <description>Appends the specified element to the end of this list.</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Removal</type>
                <value>remove</value><bigo>O(n)</bigo>
                <description>Removes the first occurrence of the specified element from this list, if it is present. If this list does not contain the element, it is unchanged. More formally, removes the element with the lowest index i such that Objects.equals(o, get(i)) (if such an element exists). Returns true if this list contained the specified element (or equivalently, if this list changed as a result of the call).</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
        </methods>
    </collection>
    <collection>
        <name>ArrayDeque</name>
        <description>Resizable-array implementation of the Deque interface. Array deques have no capacity restrictions; they grow as necessary to support usage. They are not thread-safe; in the absence of external synchronization, they do not support concurrent access by multiple threads. Null elements are prohibited. This class is likely to be faster than Stack when used as a stack, and faster than LinkedList when used as a queue.
Most ArrayDeque operations run in amortized constant time. Exceptions include remove, removeFirstOccurrence, removeLastOccurrence, contains, iterator.remove(), and the bulk operations, all of which run in linear time.</description>
        <methods>
            <method>
                <type>Access</type>
                <value>peek</value><bigo>O(1)</bigo>
                <description>Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.</description>
                <params>
                </params>
            </method>
            <method>
                <type>Search</type>
                <value>contains</value><bigo>O(n)</bigo>
                <description>Returns true if this deque contains the specified element. More formally, returns true if and only if this deque contains at least one element e such that Objects.equals(o, e).</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Insertion</type>
                <value>offer</value><bigo>O(1)</bigo>
                <description>Inserts the specified element at the end of this deque.</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Removal</type>
                <value>remove</value><bigo>O(n)</bigo>
                <description>Removes a single instance of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
        </methods>
    </collection>
    <collection>
        <name>PriorityQueue</name>
        <description>An unbounded priority queue based on a priority heap. The elements of the priority queue are ordered according to their natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used. A priority queue does not permit null elements. A priority queue relying on natural ordering also does not permit insertion of non-comparable objects (doing so may result in ClassCastException).
        Implementation note: this implementation provides O(log(n)) time for the enqueuing and dequeuing methods (offer, poll, remove() and add); linear time for the remove(Object) and contains(Object) methods; and constant time for the retrieval methods (peek, element, and size).</description>
        <methods>
            <method>
                <type>Access</type>
                <value>peek</value><bigo>O(1)</bigo>
                <description>Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.</description>
                <params>
                </params>
            </method>
            <method>
                <type>Search</type>
                <value>contains</value><bigo>O(n)</bigo>
                <description>Returns true if this queue contains the specified element. More formally, returns true if and only if this queue contains at least one element e such that o.equals(e).</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Insertion</type>
                <value>offer</value><bigo>O(log(n))</bigo>
                <description>Inserts the specified element into this priority queue.</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Removal</type>
                <value>remove</value><bigo>O(n)</bigo>
                <description>Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element e such that o.equals(e), if this queue contains one or more such elements. Returns true if and only if this queue contained the specified element (or equivalently, if this queue changed as a result of the call).</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
        </methods>
    </collection>
    <collection>
        <name>HashSet</name>
        <description>This class implements the Set interface, backed by a hash table (actually a HashMap instance). It makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time. This class permits the null element.
This class offers constant time performance for the basic operations (add, remove, contains and size), assuming the hash function disperses the elements properly among the buckets. Iterating over this set requires time proportional to the sum of the HashSet instance's size (the number of elements) plus the "capacity" of the backing HashMap instance (the number of buckets). Thus, it's very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important.</description>
        <methods>
            <method>
                <type>Search</type>
                <value>contains</value><bigo>O(1)</bigo>
                <description>Returns true if this set contains the specified element. More formally, returns true if and only if this set contains an element e such that Objects.equals(o, e).</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Insertion</type>
                <value>add</value><bigo>O(1)</bigo>
                <description>Adds the specified element to this set if it is not already present. More formally, adds the specified element e to this set if this set contains no element e2 such that Objects.equals(e, e2). If this set already contains the element, the call leaves the set unchanged and returns false.</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Removal</type>
                <value>remove</value><bigo>O(1)</bigo>
                <description>Removes the specified element from this set if it is present. More formally, removes an element e such that Objects.equals(o, e), if this set contains such an element. Returns true if this set contained the element (or equivalently, if this set changed as a result of the call). (This set will not contain the element once the call returns.)</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
        </methods>
    </collection>
    <collection>
        <name>TreeSet</name>
        <description>A NavigableSet implementation based on a TreeMap. The elements are ordered using their natural ordering, or by a Comparator provided at set creation time, depending on which constructor is used.
This implementation provides guaranteed log(n) time cost for the basic operations (add, remove and contains).</description>
        <methods>
            <method>
                <type>Search</type>
                <value>contains</value><bigo>O(log(n))</bigo>
                <description>Returns true if this set contains the specified element. More formally, returns true if and only if this set contains an element e such that Objects.equals(o, e).</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Insertion</type>
                <value>add</value><bigo>O(log(n))</bigo>
                <description>Adds the specified element to this set if it is not already present. More formally, adds the specified element e to this set if the set contains no element e2 such that Objects.equals(e, e2). If this set already contains the element, the call leaves the set unchanged and returns false.</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Removal</type>
                <value>remove</value><bigo>O(log(n))</bigo>
                <description>Removes the specified element from this set if it is present. More formally, removes an element e such that Objects.equals(o, e), if this set contains such an element. Returns true if this set contained the element (or equivalently, if this set changed as a result of the call). (This set will not contain the element once the call returns.)</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
        </methods>
    </collection>
    <collection>
        <name>HashMap</name>
        <description>Hash table based implementation of the Map interface. This implementation provides all of the optional map operations, and permits null values and the null key. (The HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time.
This implementation provides constant-time performance for the basic operations (get and put), assuming the hash function disperses the elements properly among the buckets. Iteration over collection views requires time proportional to the "capacity" of the HashMap instance (the number of buckets) plus its size (the number of key-value mappings). Thus, it's very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important.</description>
        <methods>
            <method>
                <type>Access</type>
                <value>get</value><bigo>O(1)</bigo>
                <description>Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that (key==null ? k==null : key.equals(k)), then this method returns v; otherwise it returns null. (There can be at most one such mapping.) A return value of null does not necessarily indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to null. The containsKey operation may be used to distinguish these two cases.</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Search</type>
                <value>containsValue</value><bigo>O(n)</bigo>
                <description>Returns true if this map maps one or more keys to the specified value.</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Insertion</type>
                <value>put</value><bigo>O(1)</bigo>
                <description>Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Removal</type>
                <value>remove</value><bigo>O(1)</bigo>
                <description>Removes the mapping for the specified key from this map if present.</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
        </methods>
    </collection>
    <collection>
        <name>TreeMap</name>
        <description>A Red-Black tree based NavigableMap implementation. The map is sorted according to the natural ordering of its keys, or by a Comparator provided at map creation time, depending on which constructor is used.
This implementation provides guaranteed log(n) time cost for the containsKey, get, put and remove operations. Algorithms are adaptations of those in Cormen, Leiserson, and Rivest's Introduction to Algorithms.</description>
        <methods>
            <method>
                <type>Access</type>
                <value>get</value><bigo>O(log(n))</bigo>
                <description>Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
More formally, if this map contains a mapping from a key k to a value v such that key compares equal to k according to the map's ordering, then this method returns v; otherwise it returns null. (There can be at most one such mapping.) A return value of null does not necessarily indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to null. The containsKey operation may be used to distinguish these two cases.</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Search</type>
                <value>containsValue</value><bigo>O(n)</bigo>
                <description>Returns true if this map maps one or more keys to the specified value. More formally, returns true if and only if this map contains at least one mapping to a value v such that (value==null ? v==null : value.equals(v)). This operation will probably require time linear in the map size for most implementations.</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Insertion</type>
                <value>put</value><bigo>O(log(n))</bigo>
                <description>Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
            <method>
                <type>Removal</type>
                <value>remove</value><bigo>O(log(n))</bigo>
                <description>Removes the mapping for this key from this TreeMap if present.</description>
                <params>
                    <paramsValue>java.lang.Object</paramsValue>
                </params>
            </method>
        </methods>
    </collection>
</collections>